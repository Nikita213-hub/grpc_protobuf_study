# version: '3.9'

version: '3.9'

services:
  auth:
    build:
      context: .
      dockerfile: ./auth-service/Dockerfile.dev
    volumes:
      - ./auth-service:/workspace/auth-service
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-test_password}
      - REDIS_USER=${REDIS_USER:-default}
      - REDIS_USER_PASSWORD=${REDIS_USER_PASSWORD:-password}
      - GRPC_PORT=${GRPC_AUTH_SERVICE_PORT:-44044}
      - GRPC_TIMEOUT=${GRPC_AUTH_SERVICE_TIMEOUT:-30}
    working_dir: /workspace/auth-service
    networks:
      - travel_local_net
    ports:
      - "44044:44044"
    depends_on: 
      - redis
  contracts:
    build:
      context: .
      dockerfile: contracts-service/Dockerfile.dev
    environment:
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      GRPC_CONTRACTS_SERVICE_PORT: ${GRPC_CONTRACTS_SERVICE_PORT:-44045}
      GRPC_CONTRACTS_SERVIE_TIME_OUT: ${GRPC_CONTRACTS_SERVIE_TIME_OUT:-30}
      KAFKA_BROKERS: ${KAFKA_BROKERS}
      KAFKA_CONTRACS_TOPIC: ${KAFKA_CONTRACS_TOPIC}
    working_dir: /app/contracts-service
    ports:
      - "44045:44045"
    depends_on: 
      - postgres
      - zookeeper
      - kafka
      - kafka-ui
    networks:
      - travel_local_net
  migrate:
    image: kukymbr/goose-docker:latest
    networks:
      - travel_local_net
    volumes:
      - ./db/migrations:/migrations
    environment:
      GOOSE_DRIVER: postgres
      GOOSE_DBSTRING: postgres://${DB_USER}:${DB_PASSWORD}@postgres:${DB_PORT}/${DB_NAME}
    depends_on:
      - postgres
    command: sleep 30 | up
  redis:
    image: bitnami/redis:latest
    container_name: redis_container
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_USER=${REDIS_USER:-default}
      - REDIS_USER_PASSWORD=${REDIS_USER_PASSWORD:-test_password}
    networks:
      - travel_local_net
    ports:
      - "6379:6379"
    volumes:
      - ./redisdata:/data
    # deploy:
    #   resources:
    #     limits:
    #       cpus: '0.50'
    #       memory: 512M
    #     reservations:
    #       cpus: '0.25'
    #       memory: 256M
    # healthcheck:
    #   test: ["CMD", "redis-cli", "-a", "$REDIS_PASSWORD", "ping"]
    #   interval: 5s
    #   timeout: 1s
    #   retries: 1
    restart: unless-stopped
    tty: true
    stdin_open: true
  postgres:
    image: postgres:latest
    container_name: postgres_container
    environment:
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DATABASE=${DB_NAME}
      - PG_USER=${DB_USER} 
      - PGDATA=/var/lib/postgresql/data/pgdata
    networks:
      - travel_local_net
    ports:
      - "5433:5432"
    volumes:
      - ./pgdata:/var/lib/postgresql/data/pgdata
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    command: >
      postgres -c max_connections=1000
               -c shared_buffers=256MB
               -c effective_cache_size=768MB
               -c maintenance_work_mem=64MB
               -c checkpoint_completion_target=0.7
               -c wal_buffers=16MB
               -c default_statistics_target=100
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${PG_USER} -d ${POSTGRES_DATABASE}" ]
      interval: 5s
      timeout: 1s
      retries: 1
    restart: unless-stopped
    tty: true
    stdin_open: true
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_CLIENT_PORT}
      ZOOKEEPER_TICK_TIME: ${ZOOKEEPER_TICK_TIME}
    networks:
      - travel_local_net
    ports:
      - 22181:2181
  kafka:
    image: confluentinc/cp-kafka:7.7.1
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
    hostname: kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_CLIENT_PORT}
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
    networks:
      - travel_local_net
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:29092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 10
    command: >
      bash -c "
        /etc/confluent/docker/run &
        sleep 180 && \
        kafka-topics --create --if-not-exists --bootstrap-server kafka:29092 --replication-factor 1 --partitions 1 --topic contracts
        wait
      "
  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - 8090:8080
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=kafka
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:29092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    links:
      - kafka
      - zookeeper
    networks:
      - travel_local_net
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: otel-collector
    command: ["--config=/etc/otelcol/config.yaml"]
    volumes:
      - ./otel-collector-config.yaml:/etc/otelcol/config.yaml:ro
    ports:
      - "4317:4317"   # OTLP gRPC
      - "4318:4318"   # OTLP HTTP (optional)
    networks:
      - travel_local_net

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "16686:16686"   # Jaeger UI
      - "14250:14250"   # gRPC ingest (Collector -> Jaeger)
      - "14268:14268"   # HTTP ingest (Jaeger -> Collector)
    networks:
      - travel_local_net

  loki:
    image: grafana/loki:latest
    command: -config.file=/etc/loki/loki-config.yaml
    volumes:
      - ./loki-config.yaml:/etc/loki/loki-config.yaml
      - loki-data:/loki
    networks:
      - travel_local_net
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - loki
      - jaeger 
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - travel_local_net
volumes:
  pgdata: {}
  loki-data:
  grafana-data:
  # go-mod-cache: {}
networks:
  travel_local_net:
    driver: bridge